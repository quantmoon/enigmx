"""
@author: Quantmoon Technologies
webpage: https://www.quantmoon.tech//
"""

import ray
ray.init(include_dashboard=(False),ignore_reinit_error=(True))

from enigmx.classEnigmx import EnigmX
import numpy as np
from keras.layers import Dense
from keras.models import Sequential
from sklearn.tree import DecisionTreeClassifier

from enigmx.tests.stocks import stocks

from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC,NuSVC
from sklearn.naive_bayes import GaussianNB
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import SGDClassifier

from enigmx.utils import EquitiesEnigmxUniverse

##############################################################################

# NN Keras model
def kerasModel(num_features):
    model = Sequential()
    model.add(
        Dense(8, input_dim = num_features, activation='relu') 
    )
    model.add(Dense(3, activation='softmax')) 
    # Compile model
    model.compile(loss='categorical_crossentropy', 
                  optimizer='adam', 
                  metrics=['accuracy'])
    return model

# dict with models, and params
dict_models = {
    'decisionTree': (
        DecisionTreeClassifier(), 
        {'max_leaf_nodes': list(range(2, 20)), 
         'min_samples_split': [2, 3, 4],
         'max_features' : [1]} 
        ), 
    'perceptron':(
        MLPClassifier(),
        {'activation' : ['logistic','relu','tanh'],
         'early_stopping' : [True]}
        ),
    'svm' :(
        SVC(),
        {'C' : np.arange(0.5,0.9,0.1),
         'kernel' : ['linear','poly','rbf','sigmoid']}),
    'nu' : (
        NuSVC(),
        {'nu' : np.arange(0.1,0.5,0.1),
         'kernel' : ['linear','poly','rbf','sigmoid']}),
    'randomForest' :(
        RandomForestClassifier(),
        {'max_leaf_nodes': list(range(2, 20)), 
         'min_samples_split': [2, 3, 4],
         'max_features' : [1],
         'max_samples': [100],
         'n_estimators' : [10]} 
        ),
    'stochasticGradient' : 
        (SGDClassifier(), 
         {'loss':['log', 'modified_huber'],
          'penalty':['l2', 'l1', 'elasticnet'],
          'max_iter':list(range(1,10))}),
    'qda' : (QuadraticDiscriminantAnalysis(),
             {}),
    'gaussianNB' : 
        (GaussianNB(), {}),
    'Kneighbors' : 
        (KNeighborsClassifier(), 
            {'n_neighbors': list(range(1, 5)),
             'weights':['uniform', 'distance'],
             'algorithm':['auto', 'ball_tree', 'kd_tree', 'brute']}),
    'XGBoost' : 
        (GradientBoostingClassifier(), 
         {'loss':['deviance', 'exponential'],
          'min_samples_split': [2, 3, 4]}),
    'keras': (
        kerasModel, 
        dict(
            batch_size = [10, 20, 40, 60, 80, 100], 
            epochs = [10, 50, 100]
            ) 
        )
     }

##############################################################################

main_path = 'C://'

# EnigmX instance definition
instance = EnigmX(bartype = 'VOLUME', 
                  method = 'MDI', 
                  base_path = main_path,
                  cloud_framework = False
                  ) 

# feature importance
instance.get_feature_importance(    
                      model = RandomForestClassifier(max_features=1, random_state=0), 
                      list_stocks = ['VTOL', 'ZNGA'], 
                      score_constraint = 0.3, #activar 
                      server_name = "104.154.250.197",
                      database = "BARS_FEATURES",
                      uid = '',
                      pwd = '',
                      driver = "{SQL Server}",
                      pval_kendall = 0.1,
                      k_min = 10,
                      n_samples = 15
                      )
    

# get multi process for tunning and backtest
#instance.get_multi_process(
#    code_backtest = '001', 
#    dict_exo_models = dict_models,
#    endogenous_model_sufix= 'rf',    
#    trials = 11, 
#    partitions = 2, 
#    )
